alpaca_integration_path = os.path.join(broker_integration_dir, "alpaca_integration.py")
with open(alpaca_integration_path, "w") as f:
    f.write("import logging\n")
    f.write("import pandas as pd\n\n")
    f.write("from data_fetching.alpaca_data_fetcher import AlpacaDataFetcher\n")
    f.write("from execution.alpaca_executor import AlpacaExecutor\n\n")

    f.write("logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\n\n")

    # Define AlpacaIntegration class
    f.write("class AlpacaIntegration:\n")
    f.write("    \"\"\"\n")
    f.write("    Integrates data fetching and execution for the Alpaca trading platform.\n\n")
    f.write("    This class acts as a facade, providing a single point of interaction\n")
    f.write("    for the trading agent with Alpaca's functionalities.\n")
    f.write("    It initializes and holds instances of the AlpacaDataFetcher and AlpacaExecutor.\n")
    f.write("    \"\"\"\n")
    f.write("    def __init__(self):\n")
    f.write("        \"\"\"\n")
    f.write("        Initializes the Alpaca integration by creating instances of the\n")
    f.write("        AlpacaDataFetcher and AlpacaExecutor classes.\n")
    f.write("        \"\"\"\n")
    f.write("        try:\n")
    f.write("            self.data_fetcher = AlpacaDataFetcher()\n")
    f.write("            self.executor = AlpacaExecutor()\n")
    f.write("            logging.info('AlpacaIntegration initialized.')\n")
    f.write("        except Exception as e:\n")
    f.write("            logging.error(f'Error initializing AlpacaIntegration: {e}')\n")
    f.write("            self.data_fetcher = None\n")
    f.write("            self.executor = None\n\n")


    # Add methods that delegate calls to data fetcher and executor
    f.write("    def fetch_historical_data(self, symbol: str, timeframe: str, start_date: str, end_date: str) -> pd.DataFrame:\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the historical data fetching request to the Alpaca data fetcher.\n\n")
    f.write("        Args:\n")
    f.write("            symbol: The trading symbol.\n")
    f.write("            timeframe: The data timeframe.\n")
    f.write("            start_date: The start date.\n")
    f.write("            end_date: The end date.\n\n")
    f.write("        Returns:\n")
    f.write("            A pandas DataFrame containing historical data, or an empty DataFrame.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.data_fetcher:\n")
    f.write("            return self.data_fetcher.fetch_historical_data(symbol, timeframe, start_date, end_date)\n")
    f.write("        logging.warning('Alpaca data fetcher not initialized.')\n")
    f.write("        return pd.DataFrame()\n\n")

    f.write("    def fetch_realtime_data(self, symbol: str):\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the real-time data fetching setup to the Alpaca data fetcher.\n\n")
    f.write("        Args:\n")
    f.write("            symbol: The trading symbol.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.data_fetcher:\n")
    f.write("            self.data_fetcher.fetch_realtime_data(symbol)\n")
    f.write("        else:\n")
    f.write("            logging.warning('Alpaca data fetcher not initialized.')\n\n")


    f.write("    def place_order(self, symbol: str, order_type: str, quantity: float, price: float = None, stop_loss: float = None, take_profit: float = None):\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the order placement request to the Alpaca executor.\n\n")
    f.write("        Args:\n")
    f.write("            symbol: The trading symbol.\n")
    f.write("            order_type: The type of order.\n")
    f.write("            quantity: The quantity.\n")
    f.write("            price: Optional. The price.\n")
    f.write("            stop_loss: Optional. The stop loss price.\n")
    f.write("            take_profit: Optional. The take profit price.\n\n")
    f.write("        Returns:\n")
    f.write("            A unique order ID if successful, None otherwise.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.executor:\n")
    f.write("            return self.executor.place_order(symbol, order_type, quantity, price, stop_loss, take_profit)\n")
    f.write("        logging.warning('Alpaca executor not initialized.')\n")
    f.write("        return None\n\n")

    f.write("    def modify_order(self, order_id: str, new_quantity: float = None, new_price: float = None, new_stop_loss: float = None, new_take_profit: float = None):\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the order modification request to the Alpaca executor.\n\n")
    f.write("        Args:\n")
    f.write("            order_id: The ID of the order to modify.\n")
    f.write("            new_quantity: Optional. The new quantity.\n")
    f.write("            new_price: Optional. The new price.\n")
    f.write("            new_stop_loss: Optional. The new stop loss price.\n")
    f.write("            new_take_profit: Optional. The new take profit price.\n\n")
    f.write("        Returns:\n")
    f.write("            True if successful, False otherwise.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.executor:\n")
    f.write("            return self.executor.modify_order(order_id, new_quantity, new_price, new_stop_loss, new_take_profit)\n")
    f.write("        logging.warning('Alpaca executor not initialized.')\n")
    f.write("        return False\n\n")

    f.write("    def cancel_order(self, order_id: str):\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the order cancellation request to the Alpaca executor.\n\n")
    f.write("        Args:\n")
    f.write("            order_id: The ID of the order to cancel.\n\n")
    f.write("        Returns:\n")
    f.write("            True if successful, False otherwise.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.executor:\n")
    f.write("            return self.executor.cancel_order(order_id)\n")
    f.write("        logging.warning('Alpaca executor not initialized.')\n")
    f.write("        return False\n\n")

    f.write("    def get_account_balance(self) -> float:\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the account balance request to the Alpaca executor.\n\n")
    f.write("        Returns:\n")
    f.write("            The account balance, or 0.0 if fetching fails.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.executor:\n")
    f.write("            return self.executor.get_account_balance()\n")
    f.write("        logging.warning('Alpaca executor not initialized.')\n")
    f.write("        return 0.0\n\n")

    f.write("    def get_open_positions(self) -> pd.DataFrame:\n")
    f.write("        \"\"\"\n")
    f.write("        Delegates the open positions request to the Alpaca executor.\n\n")
    f.write("        Returns:\n")
    f.write("            A pandas DataFrame with open positions, or an empty DataFrame.\n")
    f.write("        \"\"\"\n")
    f.write("        if self.executor:\n")
    f.write("            return self.executor.get_open_positions()\n")
    f.write("        logging.warning('Alpaca executor not initialized.')\n")
    f.write("        return pd.DataFrame()\n")

print(f"Created {alpaca_integration_path}")
