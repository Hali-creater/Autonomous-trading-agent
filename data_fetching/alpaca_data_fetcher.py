alpaca_fetcher_path = os.path.join(data_fetching_dir, "alpaca_data_fetcher.py")
with open(alpaca_fetcher_path, "w") as f:
    f.write("import pandas as pd\n")
    f.write("from .base_data_fetcher import BaseDataFetcher\n")
    f.write("from alpaca_trade_api.rest import REST, TimeFrame\n")
    f.write("import os\n")
    f.write("from dotenv import load_dotenv\n\n")
    f.write("load_dotenv()\n\n")
    f.write("class AlpacaDataFetcher(BaseDataFetcher):\n")
    f.write("    def __init__(self):\n")
    f.write("        self.api_key = os.getenv('ALPACA_API_KEY_ID')\n")
    f.write("        self.api_secret = os.getenv('ALPACA_API_SECRET_KEY')\n")
    f.write("        self.base_url = os.getenv('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets') # Default to paper trading URL\n")
    f.write("        if not self.api_key or not self.api_secret:\n")
    f.write("            raise ValueError('Alpaca API key and secret must be set in environment variables.')\n")
    f.write("        self.api = REST(self.api_key, self.api_secret, self.base_url)\n\n")
    f.write("    def fetch_historical_data(self, symbol: str, timeframe: str, start_date: str, end_date: str) -> pd.DataFrame:\n")
    f.write("        try:\n")
    f.write("            # Map string timeframe to Alpaca TimeFrame object\n")
    f.write("            if timeframe == '1D':\n")
    f.write("                tf = TimeFrame.Day\n")
    f.write("            elif timeframe == '1H':\n")
    f.write("                tf = TimeFrame.Hour\n")
    f.write("            elif timeframe == '15Min':\n")
    f.write("                tf = TimeFrame.Minute15\n")
    f.write("            elif timeframe == '1Min':\n")
    f.write("                tf = TimeFrame.Minute\n")
    f.write("            else:\n")
    f.write("                raise ValueError(f'Unsupported timeframe: {timeframe}')\n\n")
    f.write("            data = self.api.get_bars(symbol, tf, start_date, end_date).df\n")
    f.write("            if data.empty:\n")
    f.write("                print(f'No historical data found for {symbol} in the specified range.')\n")
    f.write("            return data\n")
    f.write("        except Exception as e:\n")
    f.write("            print(f'Error fetching historical data for {symbol}: {e}')\n")
    f.write("            return pd.DataFrame()\n\n")
    f.write("    def fetch_realtime_data(self, symbol: str):\n")
    f.write("        # Alpaca's real-time data is typically via websockets.\n")
    f.write("        # This is a placeholder for a more complex real-time implementation.\n")
    f.write("        print(f'Real-time data fetching for {symbol} not fully implemented yet for Alpaca.')\n")
    f.write("        # A real implementation would involve setting up a websocket connection\n")
    f.write("        # and handling incoming data streams.\n")
    f.write("        pass\n")
